#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define SIZE 30                                          /*宏定义班级人数上限*/
#define maxlen 100                                       /*宏定义姓名字符串长度上限*/
double average(long score[],int n);
void reversesort2(long score[],long num[],int n,char name[][maxlen]);                  /*函数声明*/
int readscore(long score[],long num[],int n,char name[][maxlen]);
int binsearch(long num[],long x,int n);
void rank(long score[],int n);
void printscore(long score[],long num[],int n,char name[][maxlen]);
void swap(long *x,long *y);
void selectionsort(int n,long score[],long num[],char name[][maxlen],int(*compare)(long a,long b));
int ascending(long a,long b);
int descending(long a,long b);
void namesort(char name[][maxlen],int n,long score[],long num[]);
int namesearch(char name[][maxlen],int n,char y[]);
int main()
{
    int swit,n,pos,pose;
    long num[SIZE],score[SIZE],x=0;
    double aver;
    char name[SIZE][maxlen],y[SIZE];
    printf("Number:200810317\nName:石冀\nSubject 6-program No.1\n\n");
    do
    {
    printf("\n\n1．Input record\n2. Calculate total and average score of course\n3. Sort in descending order by score\n4. Sort in ascending order by score\n5. Sort in ascending order by student's ID\n6．Sort in dictionary order by name\n7.Search by student's ID\n8.Search by name\n9．Statistic analysis\n10．List record\n11．Exit\nPlease enter your choice:");
    scanf("%d",&swit);

    switch(swit)
    {
        case 1:n=readscore(score,num,n,name);if(n!=-1)printf("\ninput ends!\n\n");else printf("input error!");break;
        case 2:aver=average(score,n);printf("\n\naverage number is:%.2f,total score is:%.0lf\n\n",aver,aver*n);break;
        case 3:selectionsort(n,score,num,name,descending);printscore(score,num,n,name);printf("\n\n成绩升序排列如上。\n");break;
        case 4:selectionsort(n,score,num,name,ascending);printscore(score,num,n,name);printf("\n\n成绩降序排列如上。\n");break;
        case 5:reversesort2(score,num,n,name);printscore(score,num,n,name);printf("\n\n学号排列如上。\n");break;
        case 6:namesort(name,n,score,num);printscore(score,num,n,name);break;
        case 7:reversesort2(score,num,n,name);pos=binsearch(num,x,n);if(pos!=-1){selectionsort(n,score,num,name,descending);printf("score is:%ld rank is:%d\n",score[pos],n-(pos));}else printf("NOT FOUND!");break;
        case 8:selectionsort(n,score,num,name,descending);printf("please input searching name:\n");getchar();scanf("%s",y);pose=namesearch(name,n,y);if(pose!=-1){printf("score is:%ld rank is:%d\n",score[pose],n-(pose));}else printf("NOT FOUND!");break;
        case 9:rank(score,n);break;
        case 10:printscore(score,num,n,name);break;
        case 11:printf("thank you for your using!");exit(0);
        default:printf("input error!\n\n\n");
    };
    printf("\n\n--------------------------------\n\n");
    }while(swit!=11);
    return 0;
}
/*主函数通过switch与case结构让用户选择输入统计情况，分别对应于选项运行相应程序。用户在第一次循环时必须先选择case1输入学生数据再进行统计。如果用户输入1~9以外的数，出现input error并且程序重新运行（原来保存的学生成绩仍旧保留）；如果用户输入9，输出感谢使用并且exit（0）程序正常退出。*/

void reversesort2(long score[],long num[],int n,char name[][maxlen])
{
    int i,j,k;
    char temp[SIZE];
    for(i=0;i<n-1;i++)
    {
        k=i;
        for(j=i+1;j<n;j++)
        {
           if(num[j]<num[k])k=j;
        }
        if (k!=i)
        {
            swap(&score[k],&score[i]);
            swap(&num[k],&num[i]);
            strcpy(temp,name[i]);
            strcpy(name[i],name[k]);
            strcpy(name[k],temp);
        }
    }
}
/*函数reversesort2：按学号排列，和之前的修改，仅仅是将内层for中的score数组转换为num数组，即将按成绩排名转化为按学号排名。*/
double average(long score[],int n)
{
    int i;
    double sum=0;
    for(i=0;i<n;i++)
    {
        sum+=score[i];
    }
    return n>0?sum/n:-1;
}
/*函数average：求和，并返回平均值。在主函数输出端，输出平均值，平均值乘以人数。*/
int readscore(long score[],long num[],int n,char name[][maxlen])
{
    int i;
    printf("\nHow many students?\n");
    scanf("%d",&n);
    getchar();
    printf("example:\n200810300 李华 87\n200810301 杨伟 34\n\n");
    printf("please input student`s id,name and score:\n");
    for(i=0;i<n;i++)
    {
        scanf("%ld %s %ld",&num[i],&name[i],&score[i]);
    }
    return n>0?n:-1;
}
/*函数readscore：循环存储每个学生的学号与成绩。如果输入的总人数为0，函数返回值为-1，在主程序输出端判断时会报错；如果不为0可以正常进行下一环节。*/
int binsearch(long num[],long x,int n)
{
    printf("please input searching id:");
    scanf("%ld",&x);
    int low=0,high=n-1,mid;
    while(low<=high)
    {
        mid=low+(high-low)/2;
        if(x>num[mid])low=mid+1;
        else if(x<num[mid])high=mid-1;
        else return mid;
    }
    return -1;
}
/*函数binsearch：折半查找。在主函数的输出端先用函数reversesort2将函数按学号升序排列。找到就输出mid值，未找到则函数返回值为-1，在输出端判断为NOT FOUND!并输出。*/
void rank(long score[],int n)
{
    int i,c,b,a,d,s;
    s=a=b=c=d=0;
    for(i=0;i<n;i++)
    {
        if (score[i]>=60)
        {
            if (score[i]<=70)c++;
            else if (score[i]<=80)b++;
            else if (score[i]<=90)a++;
            else s++;
        }
        else d++;
    }
    printf("\n优秀人数为%d，比例为%.1f\n",s,(double)s/n);
    printf("\n良好人数为%d，比例为%.1f\n",a,(double)a/n);
    printf("\n中等人数为%d，比例为%.1f\n",b,(double)b/n);
    printf("\n及格人数为%d，比例为%.1f\n",c,(double)c/n);
    printf("\n不及格人数为%d，比例为%.1f\n\n",d,(double)d/n);
}
/*函数rank：判断并输出各个等级的学生人数及比例。*/
void printscore(long score[],long num[],int n,char name[][maxlen])
{
    int i;
    for(i=0;i<n;i++)
    {
        printf("%d ",i+1);
        puts(name[i]);
        printf(" %ld %ld\n",num[i],score[i]);
    }
}
/*函数printscore：该函数可以将每个同学的序号，学号和成绩按照输入顺序输出。同时，如果其前面有排序函数，可以按照这个顺序输出每个同学的序号，学号和成绩。*/
void swap(long *x,long *y)
{
    long t=*x;
    *x=*y;
    *y=t;
}
/*函数swap：该函数通过指针运算，可以交换两变量的值。*/
void selectionsort(int n,long score[],long num[],char name[][maxlen],int (*compare)(long a,long b))
{
    int i,j,k;
    char temp[maxlen];
    for(i=0;i<n-1;i++)
    {
        k=i;
        for(j=i+1;j<n;j++)
        {
           if((*compare)(score[k],score[j]))k=j;
        }
        if (k!=i)
        {
            strcpy(temp,name[k]);
            strcpy(name[k],name[i]);
            strcpy(name[i],temp);
            swap(&score[k],&score[i]);
            swap(&num[k],&num[i]);
        }
    }
}
/*函数selectionsort：该函数通过函数指针，通过选择排列法按需选择降序排列和升序排列。*/
int ascending(long a,long b)
        {
            return a<b;
        }
int descending(long a,long b)
        {
            return a>b;
        }
/*函数ascending和descending：两个函数仅服务于selectionsort中的if判断步骤，以实现升序与降序的选择。*/
void namesort(char name[][maxlen],int n,long score[],long num[])
{
    int i,j;
    char temp[maxlen];
    for(i=0;i<n-1;i++)
    {
        for(j=i+1;j<n;j++)
        {
            if(strcmp(name[j],name[i])<0)
            {
            strcpy(temp,name[i]);
            strcpy(name[i],name[j]);
            strcpy(name[j],temp);
            swap(&score[j],&score[i]);
            swap(&num[j],&num[i]);
            }
        }
    }
}
/*函数namesort：通过字典排列法逐一判断前后姓名字符型常量的先后，并且作适当的交换。*/
int namesearch(char name[][maxlen],int n,char y[])
{
    int i;
    for(i=0;i<n;i++)
    {
        if(strcmp(y,name[i])==0) {return i;}
    }
    return -1;
}
/*函数nameresearch：逐一比较输入的字符串和原字符串型数组中的每一个元素，如果组内有该元素，则将该元素的下标赋给函数的值；如果没有找到则输出-1，在主函数界面显示未找到。*/
