#include <stdio.h>
#include <stdlib.h>
#define SIZE 30                                       /*宏定义班级人数上限*/
void reversesort1(int score[],long num[],int n);
double average(int score[],int n);
void reversesort2(int score[],long num[],int n);
void datasort1(int score[],long num[],int n);                   /*函数声明*/
int readscore(int score[],long num[],int n);
int binsearch(long num[],long x,int n);
void rank(int score[],int n);
void printscore(int score[],long num[],int n);
int main()
{
    int swit,score[SIZE],n,pos;
    long num[SIZE],x=0;
    double aver;
    printf("Number:200810317\nName:石冀\nSubject 5-program No.1\n\n");
    do
    {
    printf("\n\n1．Input record\n2. Calculate total and average score of course\n3. Sort in descending order by score\n4. Sort in ascending order by score\n5. Sort in ascending order by student's ID\n6．Search by student's ID\n7．Statistic analysis\n8．List record\n9．Exit\nPlease enter your choice:");
    scanf("%d",&swit);

    switch(swit)
    {
        case 1:n=readscore(score,num,n);if(n!=-1)printf("\ninput ends!\n\n");else printf("input error!");break;
        case 2:aver=average(score,n);printf("\n\naverage number is:%.1f\n\n",aver);break;
        case 3:reversesort1(score,num,n);printscore(score,num,n);printf("\n\n成绩升序排列如上。\n");break;
        case 4:datasort1(score,num,n);printscore(score,num,n);printf("\n\n成绩降序排列如上。\n");break;
        case 5:reversesort2(score,num,n);printscore(score,num,n);printf("\n\n学号排列如上。\n");break;
        case 6:reversesort2(score,num,n);pos=binsearch(num,x,n);if(pos!=-1){datasort1(score,num,n);printf("score is:%d rank is:%d",score[pos],n-pos);}else printf("NOT FOUND!");break;
        case 7:rank(score,n);break;
        case 8:printscore(score,num,n);break;
        case 9:printf("thank you for your using!");exit(0);
        default:printf("input error!\n\n\n");
    };
    }while(swit!=9);
    return 0;
}
/*主函数通过switch与case结构让用户选择输入统计情况，分别对应于选项运行相应程序。用户在第一次循环时必须先选择case1输入学生数据再进行统计。如果用户输入1~9以外的数，出现input error并且程序重新运行（原来保存的学生成绩仍旧保留）；如果用户输入9，输出感谢使用并且exit（0）程序正常退出。*/
void reversesort1(int score[],long num[],int n)
{
    int i,j,k,temp1;
    long temp2;
    for(i=0;i<n-1;i++)
    {
        k=i;
        for(j=i+1;j<n;j++)
        {
           if(score[j]<score[k])k=j;
        }
        if (k!=i)
        {
            temp1=score[k];score[k]=score[i];score[i]=temp1;
            temp2=num[k];num[k]=num[i];num[i]=temp2;
        }
    }
}
/*函数reversesort1:按成绩升序排列，即成绩最高的排在最后面，用的是选择排列法。*/
void datasort1(int score[],long num[],int n)
{
    int i,j,k,temp1;
    long temp2;
    for(i=0;i<n-1;i++)
    {
        k=i;
        for(j=i+1;j<n;j++)
        {
           if(score[j]>score[k])k=j;
        }
        if (k!=i)
        {
            temp1=score[k];score[k]=score[i];score[i]=temp1;
            temp2=num[k];num[k]=num[i];num[i]=temp2;
        }
    }
}
/*函数datasort1：按成绩降序排列，即成绩最高的排在最前面。同样是选择排列法。*/
void reversesort2(int score[],long num[],int n)
{
    int i,j,k,temp1;
    long temp2;
    for(i=0;i<n-1;i++)
    {
        k=i;
        for(j=i+1;j<n;j++)
        {
           if(num[j]<num[k])k=j;
        }
        if (k!=i)
        {
            temp1=score[k];score[k]=score[i];score[i]=temp1;
            temp2=num[k];num[k]=num[i];num[i]=temp2;
        }
    }
}
/*函数reversesort2：按学号排列，和之前的修改，仅仅是将内层for中的score数组转换为num数组，即将按成绩排名转化为按学号排名。*/
double average(int score[],int n)
{
    int i;
    double sum=0;
    for(i=0;i<n;i++)
    {
        sum+=score[i];
    }
    return n>0?sum/n:-1;
}
/*函数average：求和，并返回平均值。在主函数输出端，输出平均值，平均值乘以人数。*/
int readscore(int score[],long num[],int n)
{
    int i;
    printf("\nHow many students?\n");
    scanf("%d",&n);
    printf("example:\n200810300 87\n200810301 34\n\n");
    printf("please input student`s id and score:\n");
    for(i=0;i<n;i++)
    {
        scanf("%ld %d",&num[i],&score[i]);
    }
    return n>0?n:-1;
}
/*函数readscore：循环存储每个学生的学号与成绩。如果输入的总人数为0，函数返回值为-1，在主程序输出端判断时会报错；如果不为0可以正常进行下一环节。*/
int binsearch(long num[],long x,int n)
{
    printf("please input searching id:");
    scanf("%ld",&x);
    int low=0,high=n-1,mid;
    while(low<=high)
    {
        mid=low+(high-low)/2;
        if(x>num[mid])low=mid+1;
        else if(x<num[mid])high=mid-1;
        else return mid;
    }
    return -1;
}
/*函数binsearch：折半查找。在主函数的输出端先用函数reversesort2将函数按学号升序排列。找到就输出mid值，未找到则函数返回值为-1，在输出端判断为NOT FOUND!并输出。*/
void rank(int score[],int n)
{
    int i,c,b,a,d,s;
    s=a=b=c=d=0;
    for(i=0;i<n;i++)
    {
        if (score[i]>=60)
        {
            if (score[i]<=70)c++;
            else if (score[i]<=80)b++;
            else if (score[i]<=90)a++;
            else s++;
        }
        else d++;
    }
    printf("\n优秀人数为%d，比例为%.1f\n",s,(double)s/n);
    printf("\n良好人数为%d，比例为%.1f\n",a,(double)a/n);
    printf("\n中等人数为%d，比例为%.1f\n",b,(double)b/n);
    printf("\n及格人数为%d，比例为%.1f\n",c,(double)c/n);
    printf("\n不及格人数为%d，比例为%.1f\n\n",d,(double)d/n);
}
/*函数rank：判断并输出各个等级的学生人数及比例。*/
void printscore(int score[],long num[],int n)
{
    int i;
    for(i=0;i<n;i++)
    {
        printf("%d %ld %d\n",i+1,num[i],score[i]);
    }
}
/*函数printscore：该函数可以将每个同学的序号，学号和成绩按照输入顺序输出。同时，如果其前面有排序函数，可以按照这个顺序输出每个同学的序号，学号和成绩。*/
